# main.py
import os
import logging
from threading import Thread
from datetime import datetime
import sqlite3

import telebot
from telebot import types
from flask import Flask

# ---------- CONFIG ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", "8080"))  # Render provides PORT env var

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger("financial_guide")

if not BOT_TOKEN:
    logger.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏ BOT_TOKEN –Ω–∞ Render.")
    raise SystemExit("BOT_TOKEN not found")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ---------- HEALTH SERVER (–¥–ª—è Render Web Service) ----------
app = Flask("financial_guide_health")

@app.route("/")
def health():
    return "Financial Guide is running", 200

def run_health():
    # bind to 0.0.0.0 so platform can access it
    try:
        app.run(host="0.0.0.0", port=PORT)
    except Exception as e:
        logger.warning("Health server stopped: %s", e)

Thread(target=run_health, daemon=True).start()
logger.info(f"Health endpoint started on port {PORT}")

# ---------- SIMPLE SQLITE STORAGE ----------
DB_PATH = os.getenv("DB_PATH", "data.sqlite")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS expenses (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        category TEXT NOT NULL,
        note TEXT,
        created_at TEXT NOT NULL
    )""")
    conn.commit()
    conn.close()

def add_expense(user_id, amount, category, note=""):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO expenses (user_id, amount, category, note, created_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, amount, category, note, datetime.utcnow().isoformat())
    )
    conn.commit()
    conn.close()

def get_month_stats(user_id, year, month):
    conn = get_db_connection()
    cur = conn.cursor()
    start = datetime(year, month, 1).isoformat()
    if month == 12:
        end = datetime(year + 1, 1, 1).isoformat()
    else:
        end = datetime(year, month + 1, 1).isoformat()
    cur.execute("""
        SELECT category, SUM(amount) as total, COUNT(*) as cnt
        FROM expenses
        WHERE user_id = ? AND created_at >= ? AND created_at < ?
        GROUP BY category
        ORDER BY total DESC
    """, (user_id, start, end))
    rows = cur.fetchall()
    conn.close()
    return rows

init_db()
logger.info("SQLite DB initialized (data.sqlite)")

# ---------- BOT UI ----------
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    types.KeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É"),
    types.KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    types.KeyboardButton("üéØ –¶–µ–ª–∏ (—Å–∫–æ—Ä–æ)"),
    types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
)

def parse_expense_text(text: str):
    if not text:
        return None
    t = text.strip().replace(",", ".")
    parts = t.split()
    try:
        amount = float(parts[0])
        category = " ".join(parts[1:]) if len(parts) > 1 else "–ø—Ä–æ—á–µ–µ"
        return amount, category
    except Exception:
        # try to find numeric token anywhere
        for i, p in enumerate(parts):
            try:
                amount = float(p)
                category = " ".join(parts[:i] + parts[i+1:]) or "–ø—Ä–æ—á–µ–µ"
                return amount, category
            except Exception:
                continue
    return None

@bot.message_handler(commands=['start'])
def cmd_start(message):
    first = message.from_user.first_name or "–¥—Ä—É–≥"
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>Financial Guide</b>, –ø–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏ —Ü–µ–ª—è–º–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>500 –µ–¥–∞</code> —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É.\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.send_message(message.chat.id, "‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å '500 –µ–¥–∞' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é. –ö–æ–º–∞–Ω–¥—ã: /start /help")

add_state = {}

@bot.message_handler(func=lambda m: m.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É")
def start_add_flow(message):
    add_state[message.from_user.id] = {"step": "ask_amount"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: <code>250 –∫–∞—Ñ–µ</code>")

@bot.message_handler(func=lambda m: m.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    now = datetime.utcnow()
    rows = get_month_stats(message.from_user.id, now.year, now.month)
    if not rows:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
    else:
        bot.send_message(message.chat.id, ("\n" + "\n").join([f"{r['category']}: {r['total']:.2f} ‚ÇΩ ({r['cnt']} –∑–∞–ø–∏—Å–µ–π)" for r in rows]))

@bot.message_handler(func=lambda m: True)
def all_messages(message):
    user_id = message.from_user.id
    txt = (message.text or "").strip()
    state = add_state.get(user_id)
    if state and state.get("step") == "ask_amount":
        parsed = parse_expense_text(txt)
        if parsed:
            amount, category = parsed
            add_expense(user_id, amount, category)
            bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount:.2f} ‚ÇΩ ‚Äî {category}", reply_markup=main_menu)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>500 –µ–¥–∞</code>")
        add_state.pop(user_id, None)
        return

    parsed = parse_expense_text(txt)
    if parsed:
        amount, category = parsed
        add_expense(user_id, amount, category)
        bot.send_message(message.chat.id, f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å: {amount:.2f} ‚ÇΩ ‚Äî {category}", reply_markup=main_menu)
        return

    bot.send_message(message.chat.id, "‚ùì –ù–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=main_menu)

# ---------- START POLLING (—É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook) ----------
def start_polling():
    try:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å webhook (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)...")
        try:
            bot.remove_webhook()
        except Exception as e:
            logger.debug("remove_webhook() raised: %s", e)
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        logger.exception("Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: %s", e)
        raise

if __name__ == "__main__":
    logger.info("Financial Guide —Å—Ç–∞—Ä—Ç—É–µ—Ç")
    start_polling()
