# main.py
import os
import logging
from threading import Thread
from datetime import datetime
import sqlite3
import telebot
from telebot import types
from flask import Flask

# --------------- CONFIG ---------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", "8080"))
DB_PATH = os.getenv("DB_PATH", "data.sqlite")
CURRENCY = "‚ÇΩ"

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger("financial_guide")

if not BOT_TOKEN:
    logger.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise SystemExit("BOT_TOKEN not found")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# --------------- HEALTH (Render) ---------------
app = Flask("financial_guide_health")


@app.route("/")
def health():
    return "Financial Guide is running üü¢", 200


Thread(target=lambda: app.run(host="0.0.0.0", port=PORT), daemon=True).start()
logger.info("Health endpoint started on port %s", PORT)

# --------------- DATABASE HELPERS ---------------
def get_db_connection():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn


def init_db():
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.executescript("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE NOT NULL,
                budget REAL DEFAULT NULL
            );

            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                amount REAL NOT NULL,
                category TEXT NOT NULL,
                note TEXT,
                created_at TEXT NOT NULL
            );
        """)
        conn.commit()


def get_budget(user_id: int):
    with get_db_connection() as conn:
        row = conn.execute("SELECT budget FROM users WHERE user_id = ?", (user_id,)).fetchone()
        return row["budget"] if row else None


def set_budget(user_id: int, amount: float):
    with get_db_connection() as conn:
        conn.execute("INSERT OR IGNORE INTO users (user_id, budget) VALUES (?, ?)", (user_id, amount))
        conn.execute("UPDATE users SET budget = ? WHERE user_id = ?", (amount, user_id))
        conn.commit()


def add_expense(user_id: int, amount: float, category: str, note: str = ""):
    with get_db_connection() as conn:
        conn.execute(
            "INSERT INTO expenses (user_id, amount, category, note, created_at) VALUES (?, ?, ?, ?, ?)",
            (user_id, amount, category, note, datetime.utcnow().isoformat())
        )
        conn.commit()


def delete_expense_by_id(expense_id: int):
    with get_db_connection() as conn:
        conn.execute("DELETE FROM expenses WHERE id = ?", (expense_id,))
        conn.commit()


def get_recent_expenses(user_id: int, limit: int = 20):
    with get_db_connection() as conn:
        rows = conn.execute(
            "SELECT id, amount, category, note, created_at FROM expenses WHERE user_id = ? ORDER BY created_at DESC LIMIT ?",
            (user_id, limit)
        ).fetchall()
        return rows


def get_month_stats(user_id: int, year: int, month: int):
    start = datetime(year, month, 1).isoformat()
    if month == 12:
        end = datetime(year + 1, 1, 1).isoformat()
    else:
        end = datetime(year, month + 1, 1).isoformat()
    with get_db_connection() as conn:
        rows = conn.execute("""
            SELECT category, SUM(amount) as total, COUNT(*) as cnt
            FROM expenses
            WHERE user_id = ? AND created_at >= ? AND created_at < ?
            GROUP BY category
            ORDER BY total DESC
        """, (user_id, start, end)).fetchall()
        return rows


def get_month_total(user_id: int, year: int, month: int):
    start = datetime(year, month, 1).isoformat()
    if month == 12:
        end = datetime(year + 1, 1, 1).isoformat()
    else:
        end = datetime(year, month + 1, 1).isoformat()
    with get_db_connection() as conn:
        row = conn.execute(
            "SELECT SUM(amount) as total FROM expenses WHERE user_id = ? AND created_at >= ? AND created_at < ?",
            (user_id, start, end)
        ).fetchone()
        return row["total"] or 0.0


init_db()
logger.info("DB initialized at %s", DB_PATH)

# --------------- UI: Reply Keyboard ---------------
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(types.KeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É"))
main_menu.add(types.KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton("üïí –ò—Å—Ç–æ—Ä–∏—è"))
main_menu.add(types.KeyboardButton("üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç"), types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))

# in-memory states for guided flows
add_state = {}     # {user_id: {"step":..., "amount":..., "category":..., "note":...}}
budget_state = {}  # {user_id: {"step": "ask_budget"}}


# --------------- HELPERS ---------------
def parse_expense_text(text: str):
    """
    –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ç—Ä–∞—Ç—É.
    –õ–æ–≥–∏–∫–∞: –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é —á–∏—Å–ª–æ–≤—É—é —Ç–æ–∫–µ–Ω-—Å—É–º–º—É, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è.
    –ü—Ä–∏–º–µ—Ä—ã: "250 –µ–¥–∞", "–µ–¥–∞ 250" (—Ç–æ–∂–µ –Ω–∞–π–¥—ë—Ç), "250.50 –∫–∞—Ñ–µ"
    """
    if not text:
        return None
    t = text.strip().replace(",", ".")
    parts = t.split()
    # –∏—Å–∫–∞—Ç—å –ø–µ—Ä–≤—ã–π —á–∏—Å–ª–æ–≤–æ–π —Ç–æ–∫–µ–Ω
    for i, token in enumerate(parts):
        try:
            amount = float(token)
            category = " ".join(parts[:i] + parts[i+1:]) or "–ø—Ä–æ—á–µ–µ"
            return round(amount, 2), category
        except ValueError:
            continue
    return None


def fmt_money(x: float):
    return f"{x:.2f} {CURRENCY}"


# --------------- HANDLERS ---------------

@bot.message_handler(commands=['start'])
def cmd_start(message: types.Message):
    user_id = message.from_user.id
    first = message.from_user.first_name or "–¥—Ä—É–≥"

    # Check budget; if not set, prompt to set immediately
    budget = get_budget(user_id)
    greeting = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{first}</b>!\n\n"
        "–Ø ‚Äî <b>Financial Guide</b> ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á—ë—Ç—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –±—é–¥–∂–µ—Ç–∞.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å, –µ—Å–ª–∏ —Ç—ã –ø—Ä–µ–≤—ã—à–∞–µ—à—å –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç.\n\n"
    )

    if budget is None:
        # Ask for budget immediately
        bot.send_message(user_id, greeting + "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–º –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç. –í–≤–µ–¥–∏ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000):")
        budget_state[user_id] = {"step": "ask_budget"}
        return

    # normal flow
    bot.send_message(user_id, greeting + "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞: <code>250 –µ–¥–∞</code> –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏.", reply_markup=main_menu)


@bot.message_handler(func=lambda m: m.text == "üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç")
def ask_budget(message: types.Message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö (—á–∏—Å–ª–æ–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000")
    budget_state[user_id] = {"step": "ask_budget"}


@bot.message_handler(func=lambda m: budget_state.get(m.from_user.id, {}).get("step") == "ask_budget")
def handle_budget_input(message: types.Message):
    user_id = message.from_user.id
    txt = (message.text or "").strip()
    try:
        amount = float(txt.replace(",", "."))
        set_budget(user_id, amount)
        bot.send_message(user_id, f"‚úÖ –ú–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {fmt_money(amount)}", reply_markup=main_menu)
        budget_state.pop(user_id, None)
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000")


@bot.message_handler(func=lambda m: m.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É")
def start_add_flow(message: types.Message):
    user_id = message.from_user.id
    # ensure budget exists
    if get_budget(user_id) is None:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ä—É–±–ª—è—Ö.")
        budget_state[user_id] = {"step": "ask_budget"}
        return
    add_state[user_id] = {"step": "ask_amount"}
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: <code>250 –∫–∞—Ñ–µ</code>")


@bot.message_handler(func=lambda m: add_state.get(m.from_user.id, {}).get("step") == "ask_amount")
def handle_add_amount(message: types.Message):
    user_id = message.from_user.id
    txt = (message.text or "").strip()
    parsed = parse_expense_text(txt)
    if parsed:
        amount, category = parsed
        add_state[user_id] = {"step": "confirm", "amount": float(amount), "category": category, "note": ""}
        bot.send_message(user_id, f"–î–æ–±–∞–≤–ª—è–µ–º: {fmt_money(amount)} ‚Äî <b>{category}</b>.\n–ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å 'OK' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return
    # try interpret as pure number
    try:
        amount = float(txt.replace(",", "."))
        add_state[user_id] = {"step": "ask_category", "amount": amount}
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –µ–¥–∞).")
    except ValueError:
        bot.send_message(user_id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '250 –µ–¥–∞'.")


@bot.message_handler(func=lambda m: add_state.get(m.from_user.id, {}).get("step") == "ask_category")
def handle_add_category(message: types.Message):
    user_id = message.from_user.id
    state = add_state.get(user_id)
    if not state:
        bot.send_message(user_id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞–∂–º–∏—Ç–µ 'üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.")
        return
    category = (message.text or "–ø—Ä–æ—á–µ–µ").strip()
    state.update({"step": "confirm", "category": category, "note": ""})
    bot.send_message(user_id, f"–î–æ–±–∞–≤–ª—è–µ–º: {fmt_money(state['amount'])} ‚Äî <b>{category}</b>. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ 'OK' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")


@bot.message_handler(func=lambda m: add_state.get(m.from_user.id, {}).get("step") == "confirm")
def handle_add_confirm(message: types.Message):
    user_id = message.from_user.id
    state = add_state.get(user_id)
    if not state:
        bot.send_message(user_id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞–∂–º–∏—Ç–µ 'üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.")
        return
    text = (message.text or "").strip()
    if text.lower() in ("ok", "–≥–æ—Ç–æ–≤–æ", "ok."):
        note = state.get("note", "")
    else:
        note = text
    amount = float(state["amount"])
    category = state["category"]
    add_expense(user_id, amount, category, note)
    add_state.pop(user_id, None)

    # Check budget after adding
    now = datetime.utcnow()
    total = get_month_total(user_id, now.year, now.month)
    budget = get_budget(user_id) or 0.0
    reply = f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {fmt_money(amount)} ‚Äî {category}"
    if note:
        reply += f" ({note})"
    reply += f"\n\nüìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ {now.strftime('%B %Y')}: {fmt_money(total)}"
    if budget and total > budget:
        reply += f"\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç: {fmt_money(total)} / {fmt_money(budget)}"
    bot.send_message(user_id, reply, reply_markup=main_menu)


# Quick free-text parsing (fast path), but only if user not in guided add/budget flows
@bot.message_handler(func=lambda m: True)
def handle_text(message: types.Message):
    user_id = message.from_user.id
    if add_state.get(user_id) or budget_state.get(user_id):
        # guided flows handled by their handlers
        return

    txt = (message.text or "").strip()

    # Quick commands via keyboard
    if txt == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        # Show monthly summary + link to "–ò—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N)" with deletable items
        now = datetime.utcnow()
        stats = get_month_stats(user_id, now.year, now.month)
        if not stats:
            bot.send_message(user_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.", reply_markup=main_menu)
            return
        total = sum(r["total"] for r in stats)
        out = f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ {now.strftime('%B %Y')}:\n\n"
        for r in stats:
            perc = (r["total"] / total) * 100 if total else 0
            out += f"‚Ä¢ {r['category']}: {fmt_money(r['total'])} ({perc:.1f}%)\n"
        out += f"\nüíµ –í—Å–µ–≥–æ: {fmt_money(total)}"
        # after summary, suggest viewing detailed history
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üïí –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã", callback_data="show_history"))
        bot.send_message(user_id, out, reply_markup=markup)
        return

    if txt == "üïí –ò—Å—Ç–æ—Ä–∏—è":
        send_history_with_delete_buttons(user_id)
        return

    if txt == "üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç":
        ask_budget(message)
        return

    if txt == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        send_help(message)
        return

    # Try quick parse as expense
    parsed = parse_expense_text(txt)
    if parsed:
        if get_budget(user_id) is None:
            bot.send_message(user_id, "–ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é —Ç—Ä–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç. –ù–∞–∂–º–∏—Ç–µ 'üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç'.")
            budget_state[user_id] = {"step": "ask_budget"}
            return
        amount, category = parsed
        add_expense(user_id, amount, category, "")
        now = datetime.utcnow()
        total = get_month_total(user_id, now.year, now.month)
        budget = get_budget(user_id) or 0.0
        reply = f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å: {fmt_money(amount)} ‚Äî {category}\n\nüìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ {now.strftime('%B %Y')}: {fmt_money(total)}"
        if budget and total > budget:
            reply += f"\n\n‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç: {fmt_money(total)} / {fmt_money(budget)}"
        bot.send_message(user_id, reply, reply_markup=main_menu)
        return

    # nothing matched
    bot.send_message(user_id, "‚ùì –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '250 –µ–¥–∞' –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏.", reply_markup=main_menu)


# --------------- HISTORY & DELETE LOGIC ---------------

def send_history_with_delete_buttons(user_id: int, limit: int = 20):
    rows = get_recent_expenses(user_id, limit=limit)
    if not rows:
        bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_menu)
        return

    # Telegram message size limits: chunk lines to not exceed limit; we'll send up to limit items
    lines = []
    buttons = types.InlineKeyboardMarkup(row_width=1)
    for r in rows:
        dt = datetime.fromisoformat(r["created_at"]).strftime("%d.%m %H:%M")
        note = f" ({r['note']})" if r["note"] else ""
        line = f"#{r['id']} ‚Ä¢ {dt} ‚Äî {r['category']}: {fmt_money(r['amount'])}{note}"
        lines.append(line)
        # add delete button for this expense
        buttons.add(types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å #{r['id']}", callback_data=f"del:{r['id']}"))

    msg_text = "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:\n\n" + "\n".join(lines)
    bot.send_message(user_id, msg_text, reply_markup=buttons)


@bot.callback_query_handler(func=lambda call: call.data and (call.data.startswith("del:") or call.data.startswith("confirm_del:") or call.data == "show_history"))
def callback_delete_handler(call: types.CallbackQuery):
    data = call.data
    user_id = call.from_user.id

    if data == "show_history":
        # user pressed "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã" from summary
        send_history_with_delete_buttons(user_id)
        bot.answer_callback_query(call.id)
        return

    if data.startswith("del:"):
        # Show confirmation inline
        _, exp_id_str = data.split(":", 1)
        try:
            exp_id = int(exp_id_str)
        except ValueError:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π id")
            return
        # Build confirmation keyboard
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_del:{exp_id}"))
        kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        bot.send_message(user_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å #{exp_id}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=kb)
        bot.answer_callback_query(call.id)
        return

    if data.startswith("confirm_del:"):
        _, exp_id_str = data.split(":", 1)
        try:
            exp_id = int(exp_id_str)
        except ValueError:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π id")
            return
        # Delete and notify
        delete_expense_by_id(exp_id)
        bot.send_message(user_id, f"‚úÖ –ó–∞–ø–∏—Å—å #{exp_id} —É–¥–∞–ª–µ–Ω–∞.")
        bot.answer_callback_query(call.id)
        return

    if data == "cancel":
        bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        bot.answer_callback_query(call.id)
        return

    bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


# --------------- HELP (separated fn) ---------------
def send_help(message: types.Message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "- –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å: –æ—Ç–ø—Ä–∞–≤—å '250 –µ–¥–∞' ‚Üí —Å–æ—Ö—Ä–∞–Ω—é —Ç—Ä–∞—Ç—É.\n"
        "- –ö–Ω–æ–ø–∫–∞ 'üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É' ‚Äî –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º).\n"
        "- 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' ‚Äî —Å–≤–æ–¥–∫–∞ —Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º; —Ç–∞–º –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é.\n"
        "- –í –∏—Å—Ç–æ—Ä–∏–∏ —É –∫–∞–∂–¥–æ–π —Ç—Ä–∞—Ç—ã –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ '‚ùå –£–¥–∞–ª–∏—Ç—å' (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "- 'üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç' ‚Äî –∑–∞–¥–∞—ë—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç. –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ ‚Äî —É–≤–µ–¥–æ–º–ª—é.\n",
        reply_markup=main_menu
    )


# --------------- START POLLING ---------------
if __name__ == "__main__":
    logger.info("Financial Guide –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.remove_webhook()
    except Exception:
        pass
    bot.infinity_polling(timeout=20, long_polling_timeout=20)
