import os
import sqlite3
import telebot
from flask import Flask, request

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

app = Flask(__name__)

DB_PATH = "finance.db"

# -----------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
# -----------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            user_id INTEGER UNIQUE,
            budget REAL DEFAULT 0
        )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    c.execute('''
        CREATE TABLE IF NOT EXISTS expenses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            category TEXT,
            amount REAL,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# -----------------------
# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –±–∞–∑—ã
# -----------------------
def get_budget(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT budget FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else 0

def set_budget(user_id, amount):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, budget) VALUES (?, ?)", (user_id, amount))
    c.execute("UPDATE users SET budget=? WHERE user_id=?", (amount, user_id))
    conn.commit()
    conn.close()

def add_expense(user_id, category, amount):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO expenses (user_id, category, amount) VALUES (?, ?, ?)", (user_id, category, amount))
    conn.commit()
    conn.close()

def get_total_spent(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT SUM(amount) FROM expenses WHERE user_id=?", (user_id,))
    total = c.fetchone()[0]
    conn.close()
    return total if total else 0

# -----------------------
# –ö–æ–º–∞–Ω–¥—ã
# -----------------------
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    markup.add("üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç", "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é")
    markup.add("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV")

    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å: `250 –µ–¥–∞` –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=markup
    )

# -----------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞
# -----------------------
@bot.message_handler(func=lambda msg: msg.text == "üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç")
def ask_budget(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –º–µ—Å—è—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ (–≤ $):")
    bot.register_next_step_handler(message, save_budget)

def save_budget(message):
    try:
        amount = float(message.text)
        set_budget(message.from_user.id, amount)
        bot.send_message(message.chat.id, f"‚úÖ –ú–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount:.2f} $")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500")

# -----------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã
# -----------------------
@bot.message_handler(func=lambda msg: msg.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É")
def ask_expense(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `—Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è` (–Ω–∞–ø—Ä–∏–º–µ—Ä: `250 –µ–¥–∞`)")
    bot.register_next_step_handler(message, handle_expense)

@bot.message_handler(func=lambda msg: True)
def handle_expense(message):
    parts = message.text.strip().split(" ", 1)
    if len(parts) < 2:
        bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: `250 –µ–¥–∞`")
        return

    try:
        amount = float(parts[0])
        category = parts[1]
        add_expense(message.from_user.id, category, amount)
        total_spent = get_total_spent(message.from_user.id)
        budget = get_budget(message.from_user.id)

        msg = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount:.2f}$ –Ω–∞ {category}.\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_spent:.2f}$."
        if budget > 0 and total_spent > budget:
            msg += f"\n‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç!\n–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã: {total_spent:.2f} / {budget:.2f}$."

        bot.send_message(message.chat.id, msg)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: `250 –µ–¥–∞`")

# -----------------------
# Flask health-check
# -----------------------
@app.route('/')
def index():
    return "Bot is running"

if __name__ == "__main__":
    init_db()
    from threading import Thread
    Thread(target=lambda: bot.polling(none_stop=True, interval=0, timeout=20)).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
