import os
import logging
from threading import Thread
from datetime import datetime
import sqlite3
import telebot
from telebot import types
from flask import Flask

# ---------- CONFIG ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", "8080"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger("financial_guide")

if not BOT_TOKEN:
    logger.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ BOT_TOKEN –Ω–∞ Render.")
    raise SystemExit("BOT_TOKEN not found")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ---------- HEALTH SERVER ----------
app = Flask("financial_guide")

@app.route("/")
def health():
    return "Financial Guide is running üü¢", 200

Thread(target=lambda: app.run(host="0.0.0.0", port=PORT), daemon=True).start()

# ---------- SQLITE ----------
DB_PATH = os.getenv("DB_PATH", "data.sqlite")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()

    cur.executescript("""
        CREATE TABLE IF NOT EXISTS expenses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            category TEXT NOT NULL,
            note TEXT,
            created_at TEXT NOT NULL
        );
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL
        );
    """)

    base_cats = ["–µ–¥–∞", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–∂–∏–ª—å—ë", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–∑–¥–æ—Ä–æ–≤—å–µ", "–æ–¥–µ–∂–¥–∞", "–ø—Ä–æ—á–µ–µ"]
    cur.executemany("INSERT OR IGNORE INTO categories (name) VALUES (?)", [(c,) for c in base_cats])
    conn.commit()
    conn.close()

def add_expense(user_id, amount, category, note=""):
    with get_db_connection() as conn:
        conn.execute(
            "INSERT INTO expenses (user_id, amount, category, note, created_at) VALUES (?, ?, ?, ?, ?)",
            (user_id, amount, category, note, datetime.utcnow().isoformat())
        )

def get_recent_expenses(user_id, limit=10):
    with get_db_connection() as conn:
        return conn.execute(
            "SELECT amount, category, note, created_at FROM expenses WHERE user_id = ? ORDER BY created_at DESC LIMIT ?",
            (user_id, limit)
        ).fetchall()

def delete_last_expense(user_id):
    with get_db_connection() as conn:
        row = conn.execute("SELECT id FROM expenses WHERE user_id = ? ORDER BY created_at DESC LIMIT 1", (user_id,)).fetchone()
        if not row:
            return False
        conn.execute("DELETE FROM expenses WHERE id = ?", (row["id"],))
        return True

def get_month_stats(user_id, year, month):
    start = datetime(year, month, 1).isoformat()
    end = datetime(year + (month // 12), (month % 12) + 1, 1).isoformat()
    with get_db_connection() as conn:
        return conn.execute("""
            SELECT category, SUM(amount) as total, COUNT(*) as cnt
            FROM expenses
            WHERE user_id = ? AND created_at >= ? AND created_at < ?
            GROUP BY category ORDER BY total DESC
        """, (user_id, start, end)).fetchall()

init_db()
logger.info("SQLite DB initialized")

# ---------- BOT MENUS ----------
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    types.KeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É"),
    types.KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    types.KeyboardButton("üïí –ò—Å—Ç–æ—Ä–∏—è")
)
main_menu.add(
    types.KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é"),
    types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
)

def inline_main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üí∞ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤", callback_data="expenses"))
    markup.row(types.InlineKeyboardButton("üìä –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="forecast"))
    markup.row(types.InlineKeyboardButton("üßæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–º", callback_data="budget"))
    markup.row(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    return markup

# ---------- PARSING ----------
def parse_expense_text(text: str):
    if not text:
        return None
    t = text.strip().replace(",", ".")
    parts = t.split()
    for i, p in enumerate(parts):
        try:
            amount = float(p)
            category = " ".join(parts[:i] + parts[i+1:]) or "–ø—Ä–æ—á–µ–µ"
            return amount, category
        except ValueError:
            continue
    return None

# ---------- BOT HANDLERS ----------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    first = message.from_user.first_name or "–¥—Ä—É–≥"
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{first}</b>!\n\n"
        "–Ø ‚Äî <b>Financial Guide</b> üíº\n"
        "–ü–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç.\n\n"
        "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>250 –∫–æ—Ñ–µ</code>), "
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu)
    bot.send_message(message.chat.id, "üìã –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é:", reply_markup=inline_main_menu())

@bot.callback_query_handler(func=lambda call: True)
def inline_handler(call):
    data = call.data
    if data == "expenses":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "üí∞ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif data == "forecast":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "üìä –†–∞–∑–¥–µ–ª –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ.")
    elif data == "budget":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "üßæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–º —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.")
    elif data == "settings":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "‚öôÔ∏è –ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.send_message(message.chat.id,
        "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n"
        "/history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã\n"
        "/undo ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å\n"
        "/summary ‚Äî —Å—É–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n"
        "üí° –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–æ–¥–µ: <code>350 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</code>")

@bot.message_handler(commands=['history'])
def cmd_history(message):
    rows = get_recent_expenses(message.from_user.id)
    if not rows:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return
    text = "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã:\n\n"
    for r in rows:
        dt = datetime.fromisoformat(r["created_at"]).strftime("%d.%m %H:%M")
        note = f" ({r['note']})" if r["note"] else ""
        text += f"‚Ä¢ {dt} ‚Äî {r['category']}: {r['amount']:.2f} ‚ÇΩ{note}\n"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['undo'])
def cmd_undo(message):
    ok = delete_last_expense(message.from_user.id)
    bot.send_message(message.chat.id, "‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞." if ok else "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['summary'])
def cmd_summary(message):
    now = datetime.utcnow()
    rows = get_month_stats(message.from_user.id, now.year, now.month)
    if not rows:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
        return
    total = sum(r["total"] for r in rows)
    text = f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ {now.strftime('%B %Y')}:\n\n"
    for r in rows:
        perc = (r["total"] / total) * 100
        text += f"{r['category']}: {r['total']:.2f} ‚ÇΩ ({perc:.1f}%)\n"
    text += f"\nüíµ –í—Å–µ–≥–æ: {total:.2f} ‚ÇΩ"
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: True)
def handle_expense(message):
    parsed = parse_expense_text(message.text or "")
    if parsed:
        amount, category = parsed
        add_expense(message.from_user.id, amount, category)
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount:.2f} ‚ÇΩ ‚Äî {category}", reply_markup=main_menu)
    else:
        bot.send_message(message.chat.id, "‚ùì –ù–µ –ø–æ–Ω—è–ª. –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>200 –µ–¥–∞</code>", reply_markup=main_menu)

# ---------- START ----------
if __name__ == "__main__":
    logger.info("Financial Guide –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    bot.remove_webhook()
    bot.polling(none_stop=True, interval=0, timeout=20)

