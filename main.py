# main.py
import os
import logging
from threading import Thread
from datetime import datetime
import sqlite3
import telebot
from telebot import types
from flask import Flask

# ---------- CONFIG ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", "8080"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger("financial_guide")

if not BOT_TOKEN:
    logger.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏ BOT_TOKEN –Ω–∞ Render.")
    raise SystemExit("BOT_TOKEN not found")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ---------- HEALTH SERVER ----------
app = Flask("financial_guide_health")

@app.route("/")
def health():
    return "Financial Guide is running", 200

def run_health():
    try:
        app.run(host="0.0.0.0", port=PORT)
    except Exception as e:
        logger.warning("Health server stopped: %s", e)

Thread(target=run_health, daemon=True).start()
logger.info(f"Health endpoint started on port {PORT}")

# ---------- SQLITE ----------
DB_PATH = os.getenv("DB_PATH", "data.sqlite")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    cur.execute("""
        CREATE TABLE IF NOT EXISTS expenses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            category TEXT NOT NULL,
            note TEXT,
            created_at TEXT NOT NULL
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    cur.execute("""
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL
        )
    """)

    # –î–æ–±–∞–≤–∏–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    base_categories = ["–µ–¥–∞", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–∂–∏–ª—å—ë", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–∑–¥–æ—Ä–æ–≤—å–µ", "–æ–¥–µ–∂–¥–∞", "–ø—Ä–æ—á–µ–µ"]
    for cat in base_categories:
        cur.execute("INSERT OR IGNORE INTO categories (name) VALUES (?)", (cat,))

    conn.commit()
    conn.close()

def add_expense(user_id, amount, category, note=""):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO expenses (user_id, amount, category, note, created_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, amount, category, note, datetime.utcnow().isoformat())
    )
    conn.commit()
    conn.close()

def get_recent_expenses(user_id, limit=10):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT amount, category, note, created_at
        FROM expenses
        WHERE user_id = ?
        ORDER BY created_at DESC
        LIMIT ?
    """, (user_id, limit))
    rows = cur.fetchall()
    conn.close()
    return rows

def delete_last_expense(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id FROM expenses WHERE user_id = ? ORDER BY created_at DESC LIMIT 1", (user_id,))
    row = cur.fetchone()
    if not row:
        conn.close()
        return False
    cur.execute("DELETE FROM expenses WHERE id = ?", (row["id"],))
    conn.commit()
    conn.close()
    return True

def get_month_stats(user_id, year, month):
    conn = get_db_connection()
    cur = conn.cursor()
    start = datetime(year, month, 1).isoformat()
    if month == 12:
        end = datetime(year + 1, 1, 1).isoformat()
    else:
        end = datetime(year, month + 1, 1).isoformat()
    cur.execute("""
        SELECT category, SUM(amount) as total, COUNT(*) as cnt
        FROM expenses
        WHERE user_id = ? AND created_at >= ? AND created_at < ?
        GROUP BY category
        ORDER BY total DESC
    """, (user_id, start, end))
    rows = cur.fetchall()
    conn.close()
    return rows

init_db()
logger.info("SQLite DB initialized (data.sqlite)")

# ---------- BOT UI ----------
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    types.KeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É"),
    types.KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    types.KeyboardButton("üïí –ò—Å—Ç–æ—Ä–∏—è"),
    types.KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é"),
)
main_menu.add(
    types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
)

def parse_expense_text(text: str):
    if not text:
        return None
    t = text.strip().replace(",", ".")
    parts = t.split()
    try:
        amount = float(parts[0])
        category = " ".join(parts[1:]) if len(parts) > 1 else "–ø—Ä–æ—á–µ–µ"
        return amount, category
    except Exception:
        for i, p in enumerate(parts):
            try:
                amount = float(p)
                category = " ".join(parts[:i] + parts[i+1:]) or "–ø—Ä–æ—á–µ–µ"
                return amount, category
            except Exception:
                continue
    return None

@bot.message_handler(commands=['start'])
def cmd_start(message):
    first = message.from_user.first_name or "–¥—Ä—É–≥"
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{first}</b>!\n\n"
        "–Ø ‚Äî <b>Financial Guide</b> üíº\n"
        "–ü–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>500 –µ–¥–∞</code> –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.send_message(message.chat.id,
        "‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: <code>500 –µ–¥–∞</code>\n"
        "/history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã\n"
        "/undo ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å\n"
        "/summary ‚Äî —Å—É–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    )

@bot.message_handler(commands=['history'])
def cmd_history(message):
    rows = get_recent_expenses(message.from_user.id)
    if not rows:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return
    text = "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã:\n\n"
    for r in rows:
        dt = datetime.fromisoformat(r["created_at"]).strftime("%d.%m %H:%M")
        note = f" ({r['note']})" if r["note"] else ""
        text += f"‚Ä¢ {dt} ‚Äî {r['category']}: {r['amount']:.2f} ‚ÇΩ{note}\n"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['undo'])
def cmd_undo(message):
    ok = delete_last_expense(message.from_user.id)
    bot.send_message(message.chat.id, "‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞." if ok else "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['summary'])
def cmd_summary(message):
    now = datetime.utcnow()
    rows = get_month_stats(message.from_user.id, now.year, now.month)
    if not rows:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
        return
    total = sum(r["total"] for r in rows)
    text = f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ {now.strftime('%B %Y')}:\n\n"
    for r in rows:
        perc = (r["total"] / total) * 100
        text += f"{r['category']}: {r['total']:.2f} ‚ÇΩ ({perc:.1f}%)\n"
    text += f"\nüíµ –í—Å–µ–≥–æ: {total:.2f} ‚ÇΩ"
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: True)
def all_messages(message):
    txt = (message.text or "").strip()
    parsed = parse_expense_text(txt)
    if parsed:
        amount, category = parsed
        add_expense(message.from_user.id, amount, category)
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount:.2f} ‚ÇΩ ‚Äî {category}", reply_markup=main_menu)
    else:
        bot.send_message(message.chat.id, "‚ùì –ù–µ –ø–æ–Ω—è–ª. –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>200 –µ–¥–∞</code>", reply_markup=main_menu)

# ---------- START ----------
def start_polling():
    try:
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ webhook...")
        bot.remove_webhook()
        logger.info("Polling...")
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        logger.exception("Polling error: %s", e)
        raise

if __name__ == "__main__":
    logger.info("Financial Guide –∑–∞–ø—É—â–µ–Ω")
    start_polling()
